type: edu
custom_name: stage4
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        String input;
        Clue(String input, int x, int y) {
            this.input = input;
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static final String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;

            for (String startField : new String[] {
                "_XXOO_OX_",
                "_________",
                "X_X_O____"
            }) {

                for (String input : inputs) {
                    String fullInput = iterateCells(input);

                    String[] strNums = input.split("\\s+");
                    int x = Integer.parseInt(strNums[0]);
                    int y = Integer.parseInt(strNums[1]);

                    if (i % 2 == 1) {
                        // mix with incorrect data
                        fullInput = "4 " + i + "\n" + fullInput;
                    }

                    tests.add(new TestCase<Clue>()
                        .setInput(startField + "\n" + fullInput)
                        .setAttach(new Clue(startField, x, y)));

                    i++;
                }

            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() != 2) {
                return new CheckResult(false,
                    "Can't find two fields inside output");
            }

            TicTacToeField curr = fields.get(0);
            TicTacToeField next = fields.get(1);

            TicTacToeField correctCurr = new TicTacToeField(clue.input);
            TicTacToeField correctNext = new TicTacToeField(correctCurr.field);

            String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
            for (String input : numInputs) {
                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);
                if (correctNext.field[y - 1][x - 1] == FieldState.FREE) {
                    correctNext.field[y - 1][x - 1] = FieldState.X;
                    break;
                }
            }

            if (!curr.equalTo(correctCurr)) {
                return new CheckResult(false,
                    "The first field is not equal to the input field");
            }

            if (!next.equalTo(correctNext)) {
                return new CheckResult(false,
                    "The first field is correct, but the second is not");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            final TicTacToe area = new TicTacToe();
            final Scanner scanner = new Scanner(System.in);

            char[] input = scanner.nextLine().trim().toCharArray();

            for (char ch : input) {
                area.setArea(ch);
            }

            System.out.println(area.toString());
            scanner.close();
        }
    }

    class TicTacToe {
        char[][] area = new char[3][3];
        private char curPosition = 0;

        public void setArea(char ch, int x, int y) {
            area[x][y] = ch;
        }

        public void setArea(char ch) {
            while ( // check next free place
                    area[this.curPosition / 3][this.curPosition % 3] == 'X' ||
                    area[this.curPosition / 3][this.curPosition % 3] == 'O' ||
                    area[this.curPosition / 3][this.curPosition % 3] == '_'
            ) this.curPosition++;

            area[this.curPosition / 3][this.curPosition % 3] = ch;
            this.curPosition++;
        }

        public String checkWin() {
    //      possible variations of wins
    //      1       2       3       4       5       6       7       8
    //      XXX     ___     ___     X__     _X_     __X     X__     __X
    //      ___     XXX     ___     X__     _X_     __X     _X_     _X_
    //      ___     ___     XXX     X__     _X_     __X     __X     X__

            int wins = 0; // 0 - no one won, 1 - one win, 2 - two wins (cannot be) ...
            char winChar = 0;
            int usedArea = 0; // how many area squares has been set
            int xSet = 0;
            int oSet = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++){
                    if (area[i][j] == 'X' || area[i][j] == 'O'){
                        usedArea++;
                        if (area[i][j] == 'X') xSet++;
                        else oSet++;
                    }
                }
                if (area[i][0] == area[i][1] && area[i][1] == area[i][2]) { // 1,2,3
                    wins++;
                    winChar = area[i][0];
                }
                if (area[0][i] == area[1][i] && area[1][i] == area[2][i]) { // 4,5,6
                    wins++;
                    winChar = area[0][i];
                }
            }

            if (area[0][0] == area[1][1] && area[1][1] == area[2][2] || area[0][2] == area[1][1] && area[1][1] == area[2][0]) { // 7,8
                wins++;
                winChar = area[1][1];
            }

            if (wins == 1) return winChar + " wins";
            if (wins > 1 || xSet > oSet + 1 || xSet + 1 < oSet) return "Impossible";
            if (usedArea == 9) return "Draw";
            return "Game not finished";
        }

        @Override
        public String toString() {
            String lineBorder = "---------\n";
            String line1 = "| " + this.area[0][0] + " " + this.area[0][1] + " " + this.area[0][2] + " |\n";
            String line2 = "| " + this.area[1][0] + " " + this.area[1][1] + " " + this.area[1][2] + " |\n";
            String line3 = "| " + this.area[2][0] + " " + this.area[2][1] + " " + this.area[2][2] + " |\n";
            String winInfo = this.checkWin();

            return new StringBuilder().append(lineBorder).append(line1).append(line2).append(line3).append(lineBorder).append(winInfo).toString();
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/48/stages/258/implement
status: Solved
record: 4
